heat_template_version: 2015-10-15
description: AutoScaling in FitOS 2.0
parameters:
  image:
    type: string
    description: Image used for ASVM AutoScaling servers
    default: 6f720659-31a5-4cc3-8972-f72fa1f2008c

  key:
     type: string
     description: SSH key to connect to the servers
     default: 1

  flavor:
    type: string
    description: flavor used by the web servers
    default: b9ec00f0-0993-4ef2-88b0-e4fb85addad2

  sec_group:
    type: string
    description: security group
    default: default

  external_network:
    type: string
    description: UUID of a Neutron external network
    default: de26e094-0817-428b-8054-b4262746d11b

#  listner_protocol:
#    type: string
#    description: Protocol on which to listen for the client traffic
#    constraints:
#      - allowed_values: [TCP, HTTP, HTTPS, TERMINATED_HTTPS]
#    default: HTTP

#  listner_protocol_port:
#    type: string
#    description: TCP or UDP port on which to listen for client traffic
#    default: 80

  autoscaling_net:
    type: string
    description: autoscaling_net UUID
    default: f6cbb013-3a12-4a96-ab8c-00e354e51e69

#  autoscaling_subnet_cidr:
#    type: string
#    description: autoscaling_net IP/CIDR
#    default: 10.10.10.0/24

#  checkservice:
#    type: string
#    constraints:
#      - allowed_values: [TCP, HTTP, HTTPS]
#    default: HTTP

resources:
#  autoscaling_net:
#    type: 'OS::Neutron::Net'
#    properties:
#      name: "AutoScaling Net"
#
#  autoscaling_subnet:
#    type: OS::Neutron::Subnet
#    properties:
#      name: "AutoScaling Subnet"
#      cidr: {get_param: autoscaling_subnet_cidr}
#      dns_nameservers: [8.8.8.8, 10.19.8.15]
#      ip_version: 4
#      network_id: {get_resource: autoscaling_net}
#
#  as_router:
#    type: OS::Neutron::Router
#    properties:
#      external_gateway_info: {network: {get_param: external_network}}
#      name: "AutoScaling Router"
#
#  bind_as_router_lbaas2:
#    type: OS::Neutron::RouterInterface
#    properties:
#      router_id: {get_resource: as_router}
#      subnet_id: {get_resource: autoscaling_subnet}
#
#  load_balancer:
#    type: OS::Neutron::LBaaS::LoadBalancer
#    properties:
#      name: "LB AutoScaling"
#      vip_subnet: {get_resource: autoscaling_subnet}
#
#  lb_floating_ip:
#    type: OS::Neutron::FloatingIP
#    properties:
#      floating_network_id: {get_param: external_network}
#      port_id: {get_attr: [load_balancer, vip_port_id]}
#
#  listener:
#    type: OS::Neutron::LBaaS::Listener
#    properties:
#      name: "LB Listener AutoScaling"
#      loadbalancer: {get_resource: load_balancer}
#      protocol: {get_param: listner_protocol}
#      protocol_port: {get_param: listner_protocol_port}  
#  
#  pool:
#    type: OS::Neutron::LBaaS::Pool
#    properties:
#      name: "AutoScaling Pool"
#      protocol: {get_param: checkservice}
#      lb_algorithm: ROUND_ROBIN
#      listener: {get_resource: listener}
#  
#  #  pool_member1:
#  #   is defined in as_servers.yaml
#  
#  monitor:
#    type: OS::Neutron::LBaaS::HealthMonitor
#    properties:
#      type: {get_param: checkservice}
#      delay: 5
#      max_retries: 5
#      timeout: 5
#      pool: {get_resource: pool}

  as_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: 1
      max_size: 4
      min_size: 1
      resource:
        type: http://192.168.1.250:8888/as.yaml
        properties:
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
#          metadata: {"metering.server_group": {get_param: "OS::stack_id"}}
#          pool_id: { get_resource: pool }
          floating_ip_network: { get_param: external_network }
          instance_flavor: { get_param: flavor }
          server_network: { get_param: autoscaling_net }
#          server_subnet: { get_resource: autoscaling_subnet }
          server_image: { get_param: image }
          server_secgroup: { get_param: sec_group }
#          server_port: { get_param: listner_protocol_port }
          server_key: { get_param: key }

  scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: as_group }
      cooldown: 30
      scaling_adjustment: 1

  scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: as_group }
      cooldown: 30
      scaling_adjustment: -1

  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 30 second
      meter_name: cpu_util
      statistic: max
      period: 30
      evaluation_periods: 1
      threshold: 50
      alarm_actions:
        - {get_attr: [scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt

  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 30 second
      meter_name: cpu_util
      statistic: min
      period: 30
      evaluation_periods: 1
      threshold: 15
      alarm_actions:
        - {get_attr: [scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt

# And, our output:
#
outputs:
  Scale-UP-Alarm-URL:
    value: {get_attr: [scaleup_policy, alarm_url]}
  Scale-DOWN-Alarm-URL:
    value: {get_attr: [scaledown_policy, alarm_url]}
  Scale-UP-SIGNAL-URL:
    value: {get_attr: [scaleup_policy, signal_url]}
  Scale-DOWN-SIGNAL-URL:
    value: {get_attr: [scaledown_policy, signal_url]}
